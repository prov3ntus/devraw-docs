"use strict";(self.webpackChunkdevraw_docs=self.webpackChunkdevraw_docs||[]).push([[5],{1149:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"scripting/fundamentals/seq-sel-iter-statements","title":"GSC Constructs","description":"A detail on the sequence, selection and iteration statements, and how they work in GSC.","source":"@site/docs/scripting/fundamentals/seq-sel-iter-statements.mdx","sourceDirName":"scripting/fundamentals","slug":"/scripting/fundamentals/control-structures","permalink":"/devraw-docs/scripting/fundamentals/control-structures","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting/fundamentals/seq-sel-iter-statements.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"Control Structures","description":"A detail on the sequence, selection and iteration statements, and how they work in GSC.","slug":"control-structures"},"sidebar":"tutorialSidebar","previous":{"title":"referece-vs-value","permalink":"/devraw-docs/scripting/fundamentals/referece-vs-value"},"next":{"title":"Variables","permalink":"/devraw-docs/scripting/fundamentals/variables"}}');var s=t(4848),i=t(8453),o=t(7979);const a={sidebar_label:"Control Structures",description:"A detail on the sequence, selection and iteration statements, and how they work in GSC.",slug:"control-structures"},l="GSC Constructs",c={},d=[{value:"Sequential statements",id:"sequential-statements",level:2},{value:"Selection statements",id:"selection-statements",level:2},{value:"<code>if</code>-<code>else</code> statements",id:"if-else-statements",level:3},{value:"Switch Cases",id:"switch-cases",level:3},{value:"Iteration",id:"iteration",level:2},{value:"Count-controlled loops",id:"count-controlled-loops",level:3},{value:"Using <code>for</code> loops with arrays",id:"using-for-loops-with-arrays",level:4},{value:"Condition-controlled loops",id:"condition-controlled-loops",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:t}=n;return t||u("Details",!0),o.A||u("Levels",!1),o.A.Beginner||u("Levels.Beginner",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gsc-constructs",children:"GSC Constructs"})}),"\n",(0,s.jsx)(n.p,{children:"A detail on GSC's sequence, selection and iteration statements, and how they work."}),"\n",(0,s.jsx)(o.A.Beginner,{}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Control structures just define when code is skipped, or ran more than once by the computer. Usually when a certain condition is met."}),"\n",(0,s.jsx)(n.h2,{id:"sequential-statements",children:"Sequential statements"}),"\n",(0,s.jsx)(n.p,{children:"This just means that code is ran from top to bottom. Selection and iteration statements allow us to break this rule (see below)."}),"\n",(0,s.jsx)(n.h2,{id:"selection-statements",children:"Selection statements"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes we only want to run code if certain conditions are met."}),"\n",(0,s.jsxs)(n.p,{children:["For example, imagine a script that lets the player buy a door when they have enough points. You want to run the code that opens the door up ",(0,s.jsx)(n.strong,{children:"IF"})," the player has enough points."]}),"\n",(0,s.jsxs)(n.p,{children:["A selection statement checks if something is ",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),". You can control which code runs depending on whether a condition is satisfied."]}),"\n",(0,s.jsxs)(n.h3,{id:"if-else-statements",children:[(0,s.jsx)(n.code,{children:"if"}),"-",(0,s.jsx)(n.code,{children:"else"})," statements"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Selection Statements"',children:'if( player JumpButtonPressed() )\r\n{\r\n    // Run all code in here if above statement is true\r\n    IPrintLnBold( player.name + " has just pressed the JUMP button!" );\r\n    \r\n    // do more stuff...\r\n}\r\nelse if( player SprintButtonPressed() )\r\n{\r\n    // If previous statement was false, and if this statement is true...\r\n    IPrintLnBold( player.name + " has just pressed the SPRINT button!" );\r\n}\r\nelse if( player AttackButtonPressed() )\r\n{\r\n    // Check this statement if the previous was false\r\n    // (they\'re always checked in order)\r\n    IPrintLnBold( player.name + " has just pressed their ATTACK button!" );\r\n}\r\nelse\r\n{\r\n    // If none of the statements above were true, then run this code\r\n    IPrintLnBold( player.name + " did not sprint, jump or attack :/" );\r\n}\n'})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{children:["You don't always need to use ",(0,s.jsx)(n.code,{children:"else if"})," or ",(0,s.jsx)(n.code,{children:"else"}),"..."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:"if( !isdefined( player ) )\r\n{\r\n    return;\r\n}\r\n\r\n// Just one check!\n"})}),(0,s.jsxs)(n.p,{children:["This is also perfectly valid code! No need to always have an ",(0,s.jsx)(n.code,{children:"else if"})," or ",(0,s.jsx)(n.code,{children:"else"})," statement."]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["One-line ",(0,s.jsx)(n.code,{children:"if"})," statements"]}),(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"if"})," statements with only one line of code in its block, you don't need to wrap the one line curly braces."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:"if( !isdefined( player ) )\r\n    return;\n"})}),(0,s.jsxs)(n.p,{children:["You can also do this with ",(0,s.jsx)(n.code,{children:"for"})," / ",(0,s.jsx)(n.code,{children:"foreach"})," / ",(0,s.jsx)(n.code,{children:"while"})," statements"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:"foreach( player in GetPlayers() )\r\n    player zm_score::add_to_player_score( 420 );\n"})}),(0,s.jsxs)(n.p,{children:["If you do not use any curly braces ",(0,s.jsx)(n.code,{children:"{}"}),", then the GSC compiler will assume that ",(0,s.jsx)("u",{children:"ONLY the next line"})," belongs to the ",(0,s.jsx)(n.code,{children:"if"})," statement."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:'The "next line" is everything up to the first semicolon'})," (",(0,s.jsx)(n.code,{children:";"}),") ",(0,s.jsxs)(n.em,{children:["after the ",(0,s.jsx)(n.code,{children:"if"})," statement, as a semicolon is seen as the end of the line by the GSC compiler"]}),". Indentation and lines are ignored by the GSC compiler, (but still preserved for error messages)."]}),(0,s.jsx)(n.p,{children:"So, does that mean you can also do this?"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:"if( !isdefined( player ) ) return;\n"})}),(0,s.jsxs)(n.p,{children:["The answer is... yes! You can do that. But it's not recommended, as it can make your code harder to read. When following the logic of a program, people expect to see a new line, with some sort of indentation to signify that the code is part of the ",(0,s.jsx)(n.code,{children:"if"})," statement. So, it's good practice to use the first example I showed you."]}),(0,s.jsxs)(n.admonition,{title:"Don't make this mistake!",type:"warning",children:[(0,s.jsx)(n.p,{children:"Consider this code that doesn't break out of the loop until the player has enough points:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:'for( ;; ) // Infinite loop\r\n{\r\n    door_trigger waittill( "trigger", player );\r\n\r\n    // script_int is set in Radiant & is used as the price of the door here\r\n    if( player.score != door_trigger.script_int )\r\n        continue; // Go back to the top of the for loop (cause they\'re a brokie)\r\n    \r\n    IPrintLnBold( "Door Purchased!" );\r\n    break;\r\n}\r\n\r\n// Rotate door model & take points from player, blah blah blah...\n'})}),(0,s.jsxs)(n.p,{children:["A common error is to write a one-line ",(0,s.jsx)(n.code,{children:"if"})," statement, and then want to add something to it and forget to put the brackets back."]}),(0,s.jsxs)(n.p,{children:["Let's add an ",(0,s.jsx)(n.code,{children:"IPrintLnBold"})," so I can demonstrate the error we might make:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:'for( ;; )\r\n{\r\n    door_trigger waittill( "trigger", player );\r\n\r\n    if( player.score != door_trigger.script_int )\r\n        IPrintLnBold( "Not enough points!" ); // <--- if statement ends here\r\n        //--error\r\n        continue; // This is considered outside of the if statement!\r\n    \r\n    IPrintLnBold( "Door Purchased!" );\r\n    break;\r\n}\n'})}),(0,s.jsxs)(n.p,{children:["The GSC compiler sees the above ",(0,s.jsx)(n.code,{children:"if"})," statement like this:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:'    if( player.score != door_trigger.script_int )\r\n    {\r\n        IPrintLnBold( "Not enough points!" );\r\n    }\r\n\r\n    continue;\n'})}),(0,s.jsx)(n.p,{children:"If you can't see the problem here, let me outline it for you:"}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"continue"})," statement is outside the ",(0,s.jsx)(n.code,{children:"if"})," statement, so the function will loop back to the top, regardless of whether that ",(0,s.jsx)(n.code,{children:"if"})," statement is true."]}),(0,s.jsxs)(n.p,{children:["Therefore, the script ",(0,s.jsxs)(n.strong,{children:["will never reach the ",(0,s.jsx)(n.code,{children:'"Door Purchased!"'})," & ",(0,s.jsx)(n.code,{children:"break"})," statements"]}),". This will break functionality of the script, as every time you activate the trigger in-game, it will just run that ",(0,s.jsx)(n.code,{children:"if"})," statement, then branch back to the top and start waiting for the next trigger."]}),(0,s.jsx)(n.p,{children:"You will get no errors pointing to the issue. Be weary of this."})]})]}),"\n",(0,s.jsx)(n.h3,{id:"switch-cases",children:"Switch Cases"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"if"}),"-",(0,s.jsx)(n.code,{children:"else"})," statements are one way to run different code based on if certain conditions are met."]}),"\n",(0,s.jsxs)(n.p,{children:["Another way is by using a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"switch-case"})})," statement:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Switch-case Statement"',children:'// <weapon_obj>.name gets the console name, if you want the in-game name, do <weapon_obj>.displayname\r\nwpn_name = player GetCurrentWeapon().name;\r\nplayer.has_starting_weapon = undefined;\r\n\r\nswitch( wpn_name )\r\n{\r\n    case "pistol_standard": // Equivalent to: if( wpn_name == "pistol_standard" )\r\n    {\r\n        IPrintLn( "You have the starting pistol!" );\r\n        player.has_starting_weapon = true;\r\n\r\n        break;\r\n    }\r\n    \r\n    case "ar_peacekeeper": // Equivalent to: if( wpn_name == "ar_peacekeeper" )\r\n    {\r\n        IPrintLn( "You have the Peacekeeper!" );\r\n        player.has_starting_weapon = false;\r\n\r\n        break;\r\n    }\r\n\r\n    case "launcher_multi": // Equivalent to: if( wpn_name == "launcher_multi" )\r\n    {\r\n        IPrintLn( "You have that really cool rocket launcher gun, noice." );\r\n        player.has_starting_weapon = false;\r\n\r\n        break;\r\n    }\r\n\r\n    default: // Equivalent to "else" - will run if none of the above cases are met\r\n    {\r\n        IPrintLn( "I wonder what weapon you\'re holding..." );\r\n        player.has_starting_weapon = false;\r\n\r\n        break;\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"default"})," case is optional. If you don't include it, then the script will just move on to the next line of code if none of the cases are met. The curly braces surrounding each case's code block are also optional, but it's good practice to include them."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Switch case vs. if statements: why use one over the other?"}),(0,s.jsxs)(n.p,{children:["You can mimic the above ",(0,s.jsx)(n.code,{children:"switch-case"})," logic with ",(0,s.jsx)(n.code,{children:"if"})," statements instead. But then the question arises: Why do switch-cases exist?"]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"switch-case"})," statement is a more readable way to write multiple ",(0,s.jsx)(n.code,{children:"if"}),"-",(0,s.jsx)(n.code,{children:"else"})," statements. It's also more efficient than using multiple ",(0,s.jsx)(n.code,{children:"if"}),"-",(0,s.jsx)(n.code,{children:"else"})," statements, as the program will only check the value of ",(0,s.jsx)(n.code,{children:"wpn_name"})," once, then run the code in the corresponding ",(0,s.jsx)(n.code,{children:"case"}),"."]}),(0,s.jsxs)(n.p,{children:["They were implemented in C as a ",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/a/767849",children:"more optimised alternative"})," when comparing one variable lots of times.\r\nA general rule you can follow is if you're comparing the same item more than 5 or so times, then it'll be better to use a ",(0,s.jsx)(n.code,{children:"switch-case"})," over an ",(0,s.jsx)(n.code,{children:"if"})," statement."]}),(0,s.jsxs)(n.p,{children:["Here is equivalent ",(0,s.jsx)(n.code,{children:"if"})," statement logic of the above ",(0,s.jsx)(n.code,{children:"switch-case"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Switch-case Equivalent"',children:'wpn_name = player GetCurrentWeapon().name;\r\nplayer.has_starting_weapon = undefined;\r\n\r\n\r\nif( wpn_name == "pistol_standard" ) // Equivalent to: case "pistol_standard":\r\n{\r\n    IPrintLn( "You have the starting pistol!" );\r\n    player.has_starting_weapon = true;\r\n}\r\nelse if( wpn_name == "ar_peacekeeper" ) // Equivalent to: case "ar_peacekeeper":\r\n{\r\n    IPrintLn( "You have the Peacekeeper!" );\r\n    player.has_starting_weapon = false;\r\n}\r\nelse if( wpn_name == "launcher_multi" ) // Equivalent to: case "launcher_multi":\r\n{\r\n    IPrintLn( "You have that really cool rocket launcher gun, noice." );\r\n    player.has_starting_weapon = false;\r\n}\r\nelse // Equivalent to: default:\r\n{\r\n    IPrintLn( "I wonder what weapon you\'re holding..." );\r\n    player.has_starting_weapon = false;\r\n}\n'})}),(0,s.jsxs)(n.p,{children:["As you've probably noticed, the ",(0,s.jsx)(n.code,{children:"switch case"})," looks more readable than the ",(0,s.jsx)(n.code,{children:"if"})," statements."]})]}),"\n",(0,s.jsxs)(n.admonition,{title:"REMINDER",type:"warning",children:[(0,s.jsxs)(n.p,{children:["Don't forget to add the ",(0,s.jsx)(n.code,{children:"break;"})," statement at the end of ",(0,s.jsx)(n.strong,{children:"EACH CASE"}),", including the ",(0,s.jsx)(n.code,{children:"default"})," case at the end if you put it."]}),(0,s.jsx)(n.p,{children:"If you forget, your map will crash when the script reaches the switch case."})]}),"\n",(0,s.jsx)(n.h2,{id:"iteration",children:"Iteration"}),"\n",(0,s.jsxs)(n.p,{children:['To "iterate" just means to ',(0,s.jsx)(n.strong,{children:"repeat"}),' something. Also known as "loops".']}),"\n",(0,s.jsxs)(n.p,{children:["With iteration in programming, you can run a block of code and then ",(0,s.jsx)(n.strong,{children:"repeat"})," that same codeblock multiple times."]}),"\n",(0,s.jsx)(n.p,{children:"There are two types of iteration:"}),"\n",(0,s.jsx)(n.h3,{id:"count-controlled-loops",children:"Count-controlled loops"}),"\n",(0,s.jsx)(n.p,{children:"These loops run a certain amount of times before continuing on with the rest of the script."}),"\n",(0,s.jsxs)(n.p,{children:["To use a count-controlled loop, you can either use a ",(0,s.jsx)(n.code,{children:"for"})," loop or a ",(0,s.jsx)(n.code,{children:"foreach"})," loop in GSC."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Example of a for loop"',children:"for( idx = 0; idx < 4; idx++ )\r\n{\r\n    IPrintLn( idx );\r\n}\r\n\r\n/*\r\nOutput:\r\n0\r\n1\r\n2\r\n3\r\n*/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's break down that first line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",children:"for( idx = 0; idx < 4; idx++ )\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"idx = 0;"})," - This is the ",(0,s.jsx)(n.strong,{children:"init expression"})," - it's executed first before the rest of the for loop. It's defining the variable ",(0,s.jsx)(n.code,{children:"idx"}),", setting it to ",(0,s.jsx)(n.code,{children:"0"}),". The ",(0,s.jsx)(n.code,{children:"idx"})," variable is your index, and we use this to keep track of how many times we've looped."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"idx < 4;"})," - This is the ",(0,s.jsx)(n.strong,{children:"condition"})," - it's checked before each iteration of the loop. If it's ",(0,s.jsx)(n.code,{children:"true"}),", the loop will run. If it's ",(0,s.jsx)(n.code,{children:"false"}),", the loop will stop."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"idx++"})," - This is the ",(0,s.jsx)(n.strong,{children:"increment expression"})," - it's executed after each iteration of the loop. It's used to increment the index variable ",(0,s.jsx)(n.code,{children:"idx"})," by ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"for"})," loop will run the code block inside the curly braces ",(0,s.jsx)(n.code,{children:"{}"})," until the condition ",(0,s.jsx)(n.code,{children:"idx < 4"})," is ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"using-for-loops-with-arrays",children:["Using ",(0,s.jsx)(n.code,{children:"for"})," loops with arrays"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"for"})," loops can also be used to iterate over arrays."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="scripts/zm/_zm_utility.gsc --\x3e get_current_zone()"',children:"for (i = 0; i < zone.volumes.size; i++)\r\n{\r\n\tif ( i == vol )\r\n\t\tcontinue; \r\n\tif ( self IsTouching(zone.volumes[i]) )\r\n\t{\r\n\t\tself.cached_zone = zone; \r\n\t\tself.cached_zone_volume = i; \r\n\t\tif ( IS_TRUE( return_zone ) )\r\n\t\t{\r\n\t\t\treturn zone;\r\n\t\t}\r\n\t\treturn zone_name;\r\n\t}\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can even iterate in reverse by changing the increment expression (",(0,s.jsx)(n.code,{children:"++"}),") to a decrement expression (",(0,s.jsx)(n.code,{children:"--"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Example of a for loop iterating in reverse"',children:"for\n"})}),"\n",(0,s.jsx)(n.p,{children:"Also, you can"}),"\n",(0,s.jsxs)(n.p,{children:["// TODO ------------------\r\n// explain ",(0,s.jsx)(n.code,{children:"foreach"})]}),"\n",(0,s.jsx)(n.h3,{id:"condition-controlled-loops",children:"Condition-controlled loops"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"while"})," loops are condition-controlled loops. They run until a certain condition is met."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gsc",metastring:'title="Example of a while loop"',children:'while( !player IsAlive() )\r\n{\r\n    wait .05;\r\n}\r\n\r\nIPrintLn( "Player is alive!" );\n'})}),"\n",(0,s.jsx)(n.p,{children:"// TODO ------------------\r\n// Show examples of while loops and do-while loops"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("br",{})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},7979:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(4848);const s={Beginner:()=>(0,r.jsx)("span",{children:(0,r.jsx)("span",{style:{backgroundColor:"#0f9d58",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:"Beginner"})}),Intermediate:()=>(0,r.jsx)("span",{style:{backgroundColor:"#ffa000",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:"Intermediate"}),Advanced:()=>(0,r.jsx)("span",{style:{backgroundColor:"#ed3419",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:"Advanced"})}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);