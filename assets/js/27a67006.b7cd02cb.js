"use strict";(self.webpackChunkdevraw_docs=self.webpackChunkdevraw_docs||[]).push([[268],{6586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"scripting/fundamentals/operators","title":"operators","description":"A list of all operators in GSC and how to use them.","source":"@site/docs/scripting/fundamentals/operators.mdx","sourceDirName":"scripting/fundamentals","slug":"/scripting/fundamentals/operators","permalink":"/devraw-docs/scripting/fundamentals/operators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scripting/fundamentals/operators.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"Operators","description":"A list of all operators in GSC and how to use them."},"sidebar":"tutorialSidebar","previous":{"title":"macros","permalink":"/devraw-docs/scripting/fundamentals/macros"},"next":{"title":"referece-vs-value","permalink":"/devraw-docs/scripting/fundamentals/referece-vs-value"}}');var s=n(4848),i=n(8453);const l={sidebar_label:"Operators",description:"A list of all operators in GSC and how to use them."},d=void 0,c={},o=[{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3}];function a(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"operators",children:"Operators"}),"\n",(0,s.jsx)(t.p,{children:"Operators are just symbols that perform math or comparison operations on values."}),"\n",(0,s.jsx)(t.p,{children:"Arithmetic operators let you do math calculations."}),"\n",(0,s.jsx)(t.p,{children:"Comparison operators let you compare two values."}),"\n",(0,s.jsx)(t.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,s.jsxs)(t.p,{children:["You can use arithmetic operators to perform math operations on numbers (either ",(0,s.jsx)(t.code,{children:"int"})," or ",(0,s.jsx)(t.code,{children:"float"})," data types)."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-gsc",metastring:'title="Arithmetic Operators"',children:"total = 1000 + 250; // Add\r\ntime = 5 - 2; // Subtract\r\ndistance = 420 * -1; // Multiply\r\nspeed = distance / time; // Divide\n"})}),"\n",(0,s.jsx)(t.p,{children:"Because GSC is a dynamically-typed language, the data types are handled for you. You can mix integers and floats together in operations and not worry about it."}),"\n",(0,s.jsx)(t.p,{children:"Dividing any two integers will always return a float."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-gsc",metastring:'title="Example of integer division: Calculating player\'s K/D"',children:'kd_ratio = player.kills / player.deaths;\r\nif( IsFloat( kd_ratio ) )\r\n    IPrintLn( "Float!" );\r\nelse if( IsInt( kd_ratio ) )\r\n    IPrintLn( "Integer!" );\r\n\r\n/*\r\nOutput: Float!\r\n*/\n'})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"+"})}),(0,s.jsx)(t.td,{children:"Addition"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"12 + 8"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"-"})}),(0,s.jsx)(t.td,{children:"Subtraction"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"12 - 8"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"*"})}),(0,s.jsx)(t.td,{children:"Multiplication"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"12 * 8"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"/"})}),(0,s.jsx)(t.td,{children:"Division"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:" 12 / 8"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"%"})}),(0,s.jsx)(t.td,{children:"Modulus (remainder)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12 % 8 );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"++"})}),(0,s.jsx)(t.td,{children:"Increment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12++ );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"--"})}),(0,s.jsx)(t.td,{children:"Decrement"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12-- );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"+="})}),(0,s.jsx)(t.td,{children:"Add and assign"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12 += 8 );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"-="})}),(0,s.jsxs)(t.td,{children:["Subtract and assign: ",(0,s.jsx)(t.code,{children:"number -= 4"})," is equivalent to doing ",(0,s.jsx)(t.code,{children:"number = number - 4"})]}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12 -= 8 );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"*="})}),(0,s.jsx)(t.td,{children:"Multiply and assign"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12 *= 8 );"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"/="})}),(0,s.jsx)(t.td,{children:"Divide and assign"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"IPrintLn( 12 /= 8 );"})})]})]})]}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.mdxAdmonitionTitle,{children:["Using ",(0,s.jsx)(t.code,{children:"+"})," with strings"]}),(0,s.jsxs)(t.p,{children:["Yo can also use the ",(0,s.jsx)(t.code,{children:"+"})," operator to add strings together. This is called ",(0,s.jsx)(t.strong,{children:"concatenation"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-gsc",children:'trigger waittill( "trigger", player );\r\nIPrintLnBold( player.name + " just activated the trigger, with !" );\n'})}),(0,s.jsx)(t.p,{children:"This also works with number types, and it's how we convert numbers to strings in GSC."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-gsc",children:'// Convert the int 12 to a string\r\nstr_player_points = "" + player.points; // IsStr( str_player_points ) will return true, IsStr( player.points ) will return false\n'})})]}),"\n",(0,s.jsx)(t.admonition,{title:"Operator order",type:"note",children:(0,s.jsxs)(t.p,{children:["The GSC VM, like all other programming languages, follows the order of operations BIDMAS / BODMAS. This means that it will evaluate operations inside brackets ",(0,s.jsx)(t.code,{children:"()"})," first, then it will evaluate division and multiplication, and then addition and subtraction."]})}),"\n",(0,s.jsx)(t.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"// TODO"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)("br",{})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>d});var r=n(6540);const s={},i=r.createContext(s);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);