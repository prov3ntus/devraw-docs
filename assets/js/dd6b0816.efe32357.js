"use strict";(self.webpackChunkdevraw_docs=self.webpackChunkdevraw_docs||[]).push([[710],{754:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"general/bo3-directories","title":"BO3 Directories & File Overrides","description":"Test description","source":"@site/docs/general/bo3-directories.mdx","sourceDirName":"general","slug":"/general/bo3-directories","permalink":"/general/bo3-directories","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/general/bo3-directories.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Directories & File Overrides","description":"Test description"},"sidebar":"tutorialSidebar","previous":{"title":"General","permalink":"/category/general"},"next":{"title":"Zone Files","permalink":"/general/zone-files"}}');var i=r(4848),n=r(8453),t=r(1110);const a={sidebar_position:4,sidebar_label:"Directories & File Overrides",description:"Test description"},l="BO3 Directories & File Overrides",d={},c=[{value:"About directories",id:"about-directories",level:2},{value:"Dragging &amp; Dropping (Installing Asset Packs)",id:"dragging--dropping-installing-asset-packs",level:3},{value:"File overrides",id:"file-overrides",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return t.A||u("Levels",!1),t.A.Beginner||u("Levels.Beginner",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"bo3-directories--file-overrides",children:"BO3 Directories & File Overrides"})}),"\n",(0,i.jsxs)(s.p,{children:["This section focuses on Black Ops III's ",(0,i.jsx)(s.strong,{children:"directory system"}),", and how ",(0,i.jsx)(s.strong,{children:"dragging & dropping"})," works."]}),"\n",(0,i.jsx)(s.p,{children:"It also covers which folders the compiler prioritises when building your map (map-specific file overrides)."}),"\n",(0,i.jsx)(t.A.Beginner,{children:"Beginner"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"about-directories",children:"About directories"}),"\n",(0,i.jsxs)(s.p,{children:["When you installed Mod Tools, you may have noticed more folders in your BO3 root. Some of them are: ",(0,i.jsx)(s.code,{children:"map_source"}),", ",(0,i.jsx)(s.code,{children:"model_export"}),", ",(0,i.jsx)(s.code,{children:"share"}),", ",(0,i.jsx)(s.code,{children:"sound_assets"})," and ",(0,i.jsx)(s.code,{children:"texture_assets"}),". These are some of the main folders that store assets for the game. You'll be using them ",(0,i.jsx)(s.em,{children:"a lot"}),", regardless of whether you're a mapper, scripter, etc. and you'll naturally get more familiar with them over time."]}),"\n",(0,i.jsxs)(s.p,{children:["Sometimes, specific files ",(0,i.jsx)(s.strong,{children:"must"})," be inside the correct folder for the game to read them."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-md",metastring:'title="Visualisation of the directory tree"',children:"Call of Duty Black Ops III\n    \u2514\u2500\u2500 sound_assets\n        \u2514\u2500\u2500 pv\n            \u2514\u2500\u2500 motd_announcer_finn\n                \u2514\u2500\u2500 max_ammo.wav\n"})}),"\n",(0,i.jsxs)(s.p,{children:["For example, consider the directory above. These are custom sounds (you won't have them in your mod tools directory), and I want to put them in the game. Sound files must be within ",(0,i.jsx)(s.code,{children:"sound_assets"})," as the linker is searching ",(0,i.jsx)(s.code,{children:"<path to root>\\Call of Duty Black Ops III\\sound_assets\\"})," PLUS whatever the file path for the sound is. In the case above, the full path would be:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'"<path to root>\\Call of Duty Black Ops III\\sound_assets\\" PLUS "pv\\motd_announcer_finn\\max_ammo.wav"\n'})}),"\n",(0,i.jsxs)(s.p,{children:["This is just because the devs wanted all sounds to be located inside the ",(0,i.jsx)(s.code,{children:"sound_assets"})," folder. However this isn't the case for all files used by the game, it varies based on which file type we're talking about. For example, ",(0,i.jsx)(s.code,{children:".xmodel_bin"})," files can only be put in ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\model_export\\**"}),", but textures (PNGs, TIFFs, etc.) can go anywhere in ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\**"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["But I still recommend to keep files in their respective folders. Files can get ",(0,i.jsx)(s.em,{children:"very messy very quickly"}),", and could cause you grief later on if there's a lack of organisation, which is why in game development you'll never find a company that doesn't have a logical data structure for their game files."]}),"\n",(0,i.jsxs)(s.admonition,{title:"Note for GDT files",type:"note",children:[(0,i.jsxs)(s.p,{children:["GDT files are a unique case where it only looks inside the folders specified in the ",(0,i.jsx)(s.code,{children:"<BO3 root>\\bin\\converter_gdt_dirs_0.txt"})," file."]}),(0,i.jsx)("img",{src:r(136).A,style:{borderRadius:"0.65em"}}),(0,i.jsxs)(s.p,{children:["As an example, if you've installed any of Kingslayer Kyle's packs, your file will have the ",(0,i.jsx)(s.code,{children:"_custom"})," folder at the top of this file like I do. He stores GDTs in the ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\_custom\\**"})," folder, and he puts the folder name in this file so the game will read the GDTs in ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\_custom\\**"}),"."]}),(0,i.jsx)(s.admonition,{type:"warning",children:(0,i.jsxs)(s.p,{children:["You will never really need to use this. I'm explaining this here for your understanding. ",(0,i.jsx)(s.strong,{children:"It's not recommended to add folders to the root directory."})," It's not even necessary. Stick to organising your custom GDTs properly, keeping them inside the default folders, and next to their respective assets/files. So, if you have a GDT you're putting xmodels in, it's good practice to put the GDT in the same folder in ",(0,i.jsx)(s.code,{children:"model_export"})," as the ",(0,i.jsx)(s.code,{children:".xmodel_bin"})," file."]})})]}),"\n",(0,i.jsxs)(s.p,{children:["I recommend you make a custom folder of your username (or an abbreviation of it) in the main folders when you add assets to them, so you know which stuff is yours. Putting an underscore at the start will also help you find it easier, as File Explorer shows it at the top when you're sorting by name. For example: ",(0,i.jsx)(s.code,{children:"model_export\\_pv\\**"}),", ",(0,i.jsx)(s.code,{children:"texture_assets\\_pv_mtl\\**"})]}),"\n",(0,i.jsx)(s.h3,{id:"dragging--dropping-installing-asset-packs",children:"Dragging & Dropping (Installing Asset Packs)"}),"\n",(0,i.jsxs)(s.p,{children:["Dragging & dropping is an easy way to install someone else's assets they've released. It's a standard way for sharing assets within the Mod Tools community. The person packages up all the files by ",(0,i.jsx)(s.em,{children:"mirroring"})," the directory they were in (putting them all into the same folders they were originally in). So when you install it, you just drag the folders from their pack into your BO3 root, and the files will be in the same place as the person who shared the files."]}),"\n",(0,i.jsxs)(s.p,{children:["The file paths will all be the same, so if I'm releasing that ",(0,i.jsx)(s.a,{href:"https://www.devraw.net/releases/michael-finn-o'leary-announcer-pack",children:"Mob of the Dead Announcer pack"}),", I would put it in the same directory tree. Then when the game compiles your map, it will find the files in the same location (from the BO3 root folder)"]}),"\n",(0,i.jsxs)(s.admonition,{title:"Always check for instructions",type:"warning",children:[(0,i.jsx)(s.p,{children:"People usually leave instruction on how to install their pack, in case there are a few more steps than a simple drag n' drop."}),(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Make sure you're checking for the instructions"})," and ",(0,i.jsx)(s.strong,{children:"reading through them thoroughly"})," so you don't miss anything. No one likes helping a guy in help chat who was too lazy to read instructions properly. If you genuinely need some help tho that's perfectly okay."]})]}),"\n",(0,i.jsx)(s.h2,{id:"file-overrides",children:"File overrides"}),"\n",(0,i.jsxs)(s.p,{children:["Just like ",(0,i.jsx)(s.code,{children:"sound_assets"})," is the base folder for sound files, there is another 'base' folder used for common shared files used by all maps, located in ",(0,i.jsx)(s.code,{children:"<BO3 root>\\share\\**"}),". There are three folders in here: ",(0,i.jsx)(s.code,{children:"assetconvert\\"}),", ",(0,i.jsx)(s.code,{children:"gamedata\\"}),", ",(0,i.jsx)(s.code,{children:"zone_source\\"})," & ",(0,i.jsx)(s.code,{children:"raw\\"}),"."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"assetconvert\\"}),' is where the assets that are "converted" (compiled) are cached, for example when you drag a model down in Radiant, it has to convert the model into a mesh and compress its textures. When it does those conversions, it caches the converted files so you won\'t have to do that conversion process again if you decide to use the model elsewhere.']}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"gamedata\\"})," is mainly used for vox stuff, which you don't need to know right now."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"zone_source\\"})," is where the game looks for ",(0,i.jsx)(s.code,{children:".zpkg"})," files (see ",(0,i.jsx)(s.a,{href:"/general/zone-files",children:"Zone Files"})," if you don't know what ",(0,i.jsx)(s.code,{children:".zpkg"})," files do)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["And, last but not least, the ",(0,i.jsx)(s.code,{children:"raw\\"})," subfolder in the ",(0,i.jsx)(s.code,{children:"share\\"})," folder is where most of the ",(0,i.jsx)(s.strong,{children:"global"})," folders are stored. We're gonna be focusing on this folder for now."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Now there are a ton of folders here, but don't let that intimidate you. For now, let's just focus on the ",(0,i.jsx)(s.code,{children:"scripts"})," folder."]}),"\n",(0,i.jsx)("img",{src:r(7767).A,style:{borderRadius:"0.55em",maxHeight:450}}),"\n",(0,i.jsxs)(s.p,{children:["This is where all the ",(0,i.jsx)(s.strong,{children:"global scripts"})," are stored. What do I mean by global? Well, these scripts can be called and used in any map (assuming you've ",(0,i.jsx)(s.a,{href:"/general/zone-files",children:"zoned them"}),", of course). This also applies to every other file in the ",(0,i.jsx)(s.code,{children:"share\\raw\\**"})," directory."]}),"\n",(0,i.jsxs)(s.p,{children:["But what if you wanted to change a script, or another file for a specific map? For example, you wanted to change the perk machines to different models in only one map? Because if you change the script in ",(0,i.jsx)(s.code,{children:"share\\raw\\**"}),", it'll reflect the changes whenever you build any map using that script."]}),"\n",(0,i.jsxs)(s.p,{children:["Well, before the linker checks if the file is in ",(0,i.jsx)(s.code,{children:"share\\raw\\**"}),", it'll actually check if it's in your map folder first (e.g. ",(0,i.jsx)(s.code,{children:"<BO3 root>\\usermaps\\zm_ambient_test\\"}),"). The ",(0,i.jsx)(s.strong,{children:"root of your map folder"})," will ",(0,i.jsx)(s.strong,{children:"mirror"})," the ",(0,i.jsx)(s.code,{children:"share\\raw\\**"})," folder."]}),"\n",(0,i.jsxs)(s.p,{children:["Let's keep going with that perk machine problem. I only want to change the model for, let's say, quick revive in my ",(0,i.jsx)(s.code,{children:"zm_ambient_test"})," map. The ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\usermaps\\zm_ambient_test\\"})," folder acts as a map-specific override ",(0,i.jsx)(s.strong,{children:"above"})," anything in ",(0,i.jsx)(s.code,{children:"share\\raw\\**"}),". In this case I want to change the perk machine model, so I would copy the quick revive ",(0,i.jsx)(s.code,{children:".gsh"})," file from ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\share\\raw\\scripts\\zm\\*"}),", and paste it here: ",(0,i.jsx)(s.code,{children:"<BO3 ROOT>\\usermaps\\zm_ambient_test\\scripts\\zm\\*"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Now, I can change what I like about the script I just copied, and it will only apply to the respective level (",(0,i.jsx)(s.code,{children:"zm_ambient_test"})," in this case)."]})]})}function p(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function u(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1110:(e,s,r)=>{r.d(s,{A:()=>i});var o=r(4848);const i={Beginner:e=>{let{children:s}=e;return(0,o.jsx)("span",{children:(0,o.jsx)("span",{style:{backgroundColor:"#0f9d58",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:s})})},Intermediate:e=>{let{children:s}=e;return(0,o.jsx)("span",{style:{backgroundColor:"#ffa000",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:s})},Advanced:e=>{let{children:s}=e;return(0,o.jsx)("span",{style:{backgroundColor:"#ed3419",borderRadius:"0.4rem",color:"#fff",padding:"10px",marginBottom:"1.25rem"},children:s})}}},136:(e,s,r)=>{r.d(s,{A:()=>o});const o=r.p+"assets/images/ss-converter-gdt-dirs-file-d8fd19480e7b93d9aaa5936fce4dd633.png"},7767:(e,s,r)=>{r.d(s,{A:()=>o});const o=r.p+"assets/images/ss-scripts-folder-embed-488dbb663fe82df34d4d239bb2827042.png"},8453:(e,s,r)=>{r.d(s,{R:()=>t,x:()=>a});var o=r(6540);const i={},n=o.createContext(i);function t(e){const s=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(n.Provider,{value:s},e.children)}}}]);